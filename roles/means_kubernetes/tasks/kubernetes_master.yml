---

- name: 'Check if Kubernetes has already been initialized'
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

- name: 'Init configuration file present'
  become: true
  template:
    src: kubeadm-config-init.j2
    dest: /tmp/kubeadm-config-init.yml
  when: not kubernetes_init_stat.stat.exists

- name: 'Initialize Kubernetes master (if not already)'
  become: true
  command: kubeadm init --config /tmp/kubeadm-config-init.yml
  when: not kubernetes_init_stat.stat.exists

- name: 'Ensure ~/.kube exists'
  file:
    path: "{{ ansible_env.HOME }}/.kube"
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: 'Ensure ~/.kube/config populated'
  become: true
  copy:
    remote_src: true
    src: /etc/kubernetes/admin.conf
    dest: "{{ ansible_env.HOME }}/.kube/config"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: 'Configure CNI networking'
  command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  register: cni_result
  changed_when: "'created' in cni_result.stdout"

- name: 'Get the kubeadm join command'
  command: kubeadm token create --print-join-command
  changed_when: false
  register: kubernetes_join_command_result

- name: 'Set the kubeadm join command for each device'
  set_fact:
    kubernetes_join_command: "{{ kubernetes_join_command_result.stdout }}"
  when: kubernetes_join_command_result is defined
  delegate_to: "{{ item }}"
  delegate_facts: true
  with_items: "{{ groups['all'] }}"

#- name: 'Check for existing master taint'
#  shell: kubectl describe nodes | grep '^\s*Taints'
#  changed_when: false
#  register: kubernetes_taints

#- name: 'Untaint all masters'
#  command: 'kubectl taint nodes --all node-role.kubernetes.io/master-'
#  when: "'node-role.kubernetes.io/master' in kubernetes_taints.stdout"

- name: 'Ensure /var/lib/k8s-pv/ exists'
  become: true
  file:
    path: /var/lib/k8s-pv/
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Install helm if not exists
  become: true
  unarchive:
    src: https://get.helm.sh/helm-v3.17.0-linux-amd64.tar.gz
    dest: /usr/local/bin
    extra_opts: "--strip-components=1"
    owner: root
    group: root
    mode: 0755
    remote_src: true
  args:
    creates: /usr/local/bin/helm

- name:  'Add ArgoCD repository'
  community.kubernetes.helm_repository:
    name: argo
    repo_url: https://argoproj.github.io/argo-helm

- name:  'Install ArgoCD'
  community.kubernetes.helm:
    name: argo-cd
    chart_ref: argo/argo-cd
    release_namespace: argocd
    create_namespace: true
    release_values:
      crds:
        install: true
    wait: true

- name:  'Add Crossplane repository'
  community.kubernetes.helm_repository:
    name: crossplane-stable
    repo_url: https://charts.crossplane.io/stable

- name:  'Install Crossplane'
  community.kubernetes.helm:
    name: crossplane-system
    chart_ref: crossplane-stable/crossplane
    release_namespace: crossplane-system
    create_namespace: true
    wait: true
